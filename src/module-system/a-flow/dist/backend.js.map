{"version":3,"sources":["webpack://egg-born-module-a-flow/./backend/src/aops.js","webpack://egg-born-module-a-flow/./backend/src/bean/atom.flowDef.js","webpack://egg-born-module-a-flow/./backend/src/bean/bean.flow.js","webpack://egg-born-module-a-flow/./backend/src/bean/bean.flowDef.js","webpack://egg-born-module-a-flow/./backend/src/bean/local.context.edge.js","webpack://egg-born-module-a-flow/./backend/src/bean/local.context.flow.js","webpack://egg-born-module-a-flow/./backend/src/bean/local.context.node.js","webpack://egg-born-module-a-flow/./backend/src/bean/local.flow.edge.js","webpack://egg-born-module-a-flow/./backend/src/bean/local.flow.flow.js","webpack://egg-born-module-a-flow/./backend/src/bean/local.flow.listener.js","webpack://egg-born-module-a-flow/./backend/src/bean/local.flow.node.js","webpack://egg-born-module-a-flow/./backend/src/bean/local.procedure.js","webpack://egg-born-module-a-flow/./backend/src/bean/queue.deploy.js","webpack://egg-born-module-a-flow/./backend/src/bean/stats.flowInitiateds.js","webpack://egg-born-module-a-flow/./backend/src/bean/version.manager.js","webpack://egg-born-module-a-flow/./backend/src/beans.js","webpack://egg-born-module-a-flow/./backend/src/common/flowEdgeBase.js","webpack://egg-born-module-a-flow/./backend/src/common/flowNodeBase.js","webpack://egg-born-module-a-flow/./backend/src/common/utils.js","webpack://egg-born-module-a-flow/./backend/src/common/vars.js","webpack://egg-born-module-a-flow/./backend/src/config/config.js","webpack://egg-born-module-a-flow/./backend/src/config/constants.js","webpack://egg-born-module-a-flow/./backend/src/config/errors.js","webpack://egg-born-module-a-flow/./backend/src/config/locale/en-us.js","webpack://egg-born-module-a-flow/./backend/src/config/locale/zh-cn.js","webpack://egg-born-module-a-flow/./backend/src/config/locales.js","webpack://egg-born-module-a-flow/./backend/src/config/socketio/workflow.js","webpack://egg-born-module-a-flow/./backend/src/config/static/resources.js","webpack://egg-born-module-a-flow/./backend/src/config/validation/schemas.js","webpack://egg-born-module-a-flow/./backend/src/controller/flow.js","webpack://egg-born-module-a-flow/./backend/src/controller/flowDef.js","webpack://egg-born-module-a-flow/./backend/src/controllers.js","webpack://egg-born-module-a-flow/./backend/src/main.js","webpack://egg-born-module-a-flow/./backend/src/meta.js","webpack://egg-born-module-a-flow/./backend/src/model/flow.js","webpack://egg-born-module-a-flow/./backend/src/model/flowDef.js","webpack://egg-born-module-a-flow/./backend/src/model/flowDefContent.js","webpack://egg-born-module-a-flow/./backend/src/model/flowDefFull.js","webpack://egg-born-module-a-flow/./backend/src/model/flowHistory.js","webpack://egg-born-module-a-flow/./backend/src/model/flowNode.js","webpack://egg-born-module-a-flow/./backend/src/model/flowNodeHistory.js","webpack://egg-born-module-a-flow/./backend/src/models.js","webpack://egg-born-module-a-flow/./backend/src/routes.js","webpack://egg-born-module-a-flow/./backend/src/service/flow.js","webpack://egg-born-module-a-flow/./backend/src/service/flowDef.js","webpack://egg-born-module-a-flow/./backend/src/services.js","webpack://egg-born-module-a-flow/external \"require3\"","webpack://egg-born-module-a-flow/external \"vm\"","webpack://egg-born-module-a-flow/webpack/bootstrap","webpack://egg-born-module-a-flow/webpack/startup"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;;;;ACHA;;AAEA;;AAEA,kBAAkB,wBAAwB;AAC1C;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,OAAO;AACP,cAAc;AACd;;AAEA,gBAAgB,gCAAgC;AAChD;AACA,qCAAqC,gCAAgC;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,kCAAkC;AACpD;AACA,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,8CAA8C;AAC/D;AACA,yBAAyB,8CAA8C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,GAAG;AACV;AACA,OAAO,EAAE;;AAET;AACA;AACA,8DAA8D,iBAAiB;AAC/E;AACA;AACA,gDAAgD,wBAAwB;AACxE,WAAW;AACX;AACA;AACA;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,0BAA0B,uBAAuB;AACjD;;AAEA,kBAAkB,uBAAuB;AACzC;AACA,0BAA0B,uBAAuB;AACjD;AACA;AACA,4CAA4C,wBAAwB;AACpE,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACtGA,WAAW,mBAAO,CAAC,GAAI;;AAEvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,6DAA6D;AACnF;AACA,aAAa,UAAU,qCAAqC,aAAa;AACzE;AACA,uDAAuD,aAAa;AACpE;AACA;AACA,gCAAgC,0DAA0D;AAC1F;;AAEA,qBAAqB,4DAA4D;AACjF;AACA,sDAAsD,YAAY;AAClE;AACA;AACA,gCAAgC,0DAA0D;AAC1F;;AAEA,wBAAwB,sBAAsB;AAC9C,uEAAuE;AACvE;;AAEA,0BAA0B,gDAAgD;AAC1E;AACA,6CAA6C,2CAA2C;AACxF;AACA,8CAA8C,2BAA2B;AACzE;;AAEA,gCAAgC,2BAA2B;AAC3D;AACA;AACA,8BAA8B,YAAY,gBAAgB,UAAU;AACpE;AACA,4DAA4D,aAAa;AACzE;AACA,gEAAgE,aAAa;AAC7E;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,0DAA0D;AAC5E;AACA,qDAAqD,UAAU;AAC/D;AACA,gCAAgC,iDAAiD;AACjF;AACA;AACA;;AAEA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA,yCAAyC,aAAa;AACtD,OAAO;AACP,gDAAgD,SAAS;AACzD;AACA;AACA;AACA,kEAAkE,qEAAqE;AACvI;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;;AAEA,yBAAyB,UAAU;AACnC,gDAAgD,wBAAwB;AACxE;AACA,OAAO;AACP;AACA;;AAEA,iCAAiC,sBAAsB;AACvD;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE,OAAO;AACP,wDAAwD,aAAa;AACrE;AACA;AACA;AACA,yDAAyD,mCAAmC;AAC5F;AACA,qEAAqE,oBAAoB;AACzF;AACA;;AAEA,8BAA8B,qBAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,iBAAiB,gBAAgB;AACjC,gCAAgC,0BAA0B;AAC1D;;AAEA,kBAAkB,6CAA6C;AAC/D,sCAAsC,kCAAkC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;AACA,iBAAiB,WAAW,4BAA4B,qCAAqC;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;AChRA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,aAAa;AACjC,mCAAmC,kCAAkC;AACrE;;AAEA,mBAAmB,YAAY;AAC/B;AACA,kCAAkC,YAAY;AAC9C;;AAEA,+BAA+B,8BAA8B;AAC7D;AACA,0CAA0C,mDAAmD;AAC7F;AACA;AACA,sCAAsC,oDAAoD;AAC1F;AACA;AACA;AACA;;AAEA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,OAAO;AACP;;AAEA,wBAAwB,YAAY;AACpC;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,oBAAoB,YAAY;AAChC,uCAAuC,OAAO,oBAAoB,EAAE;AACpE;;AAEA,qBAAqB,yCAAyC;AAC9D;AACA,aAAa,UAAU,yBAAyB,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iFAAiF,aAAa,GAAG,SAAS;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,aAAa,SAAS;AAC7E,WAAW;AACX,8BAA8B,4CAA4C,aAAa,cAAc;AACrG;AACA,gCAAgC,yBAAyB,GAAG,IAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,aAAa,SAAS;AAC7E,WAAW;AACX,8BAA8B,4CAA4C,aAAa,cAAc;AACrG;AACA,gCAAgC,yBAAyB,GAAG,IAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,qBAAqB,kBAAkB,GAAG,gBAAgB;AAC1D;AACA,cAAc;AACd;AACA;;AAEA;AACA;;;;;;;;AC/OA;;AAEA;;AAEA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACnBA;;AAEA;;AAEA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACjCA;;AAEA;;AAEA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC3BA,gBAAgB,mBAAO,CAAC,GAAoB;;AAE5C;AACA;AACA;AACA,iBAAiB,8CAA8C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,uCAAuC;AACrF;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gCAAgC;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC9EA,eAAe,mBAAO,CAAC,GAAmB;AAC1C,gBAAgB,mBAAO,CAAC,GAAoB;;AAE5C;AACA;AACA;;AAEA,iBAAiB,UAAU;AAC3B;AACA,0CAA0C,wBAAwB;AAClE;AACA,OAAO;AACP;AACA,gDAAgD,wBAAwB;AACxE;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,2DAA2D;AAC5E;AACA;AACA;AACA,6CAA6C,6CAA6C;AAC1F;AACA,+BAA+B,SAAS;AACxC;AACA,4CAA4C,qCAAqC;AACjF;AACA;AACA,6EAA6E,eAAe;AAC5F,4EAA4E,oCAAoC,GAAG,iCAAiC;AACpJ;AACA;AACA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;;AAEA,iBAAiB,gBAAgB;AACjC;AACA,+BAA+B,2BAA2B;AAC1D;;AAEA,qBAAqB,cAAc;AACnC,+DAA+D,kDAAkD;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA,uDAAuD,aAAa;AACpE;AACA,mEAAmE,SAAS;AAC5E;AACA;AACA;AACA;AACA;AACA,2DAA2D,+CAA+C;AAC1G;AACA;AACA,0CAA0C,0BAA0B;AACpE;AACA,OAAO;AACP;;AAEA,6BAA6B,SAAS;AACtC,uCAAuC,OAAO,SAAS,EAAE;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA,iBAAiB,uCAAuC;AACxD,SAAS;AACT,OAAO;AACP;AACA;AACA,gBAAgB,SAAS;AACzB,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,OAAO;AACnD,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB;AACnE,yBAAyB,8CAA8C,KAAK,yEAAyE;AACrJ,sDAAsD,qBAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,OAAO;AACP;AACA,+DAA+D,WAAW;AAC1E;AACA;AACA;;AAEA,uBAAuB,6CAA6C;AACpE;AACA;AACA,2DAA2D,qBAAqB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,0BAA0B,UAAU;AACpC,wCAAwC,wBAAwB;AAChE;AACA,OAAO;AACP;AACA;;AAEA,6BAA6B,oBAAoB;AACjD,yCAAyC,oCAAoC;AAC7E;AACA,8CAA8C,UAAU;AACxD,wBAAwB,oBAAoB;AAC5C;AACA;;AAEA,+BAA+B,0BAA0B;AACzD,8CAA8C,UAAU;AACxD,uBAAuB,iBAAiB;AACxC;AACA;;AAEA,+BAA+B,uBAAuB;AACtD,wCAAwC,wBAAwB;AAChE;AACA,OAAO;AACP;AACA;AACA;;AAEA,kBAAkB,YAAY;AAC9B;AACA;AACA,OAAO;AACP;AACA;;AAEA,iCAAiC,4BAA4B;AAC7D,yCAAyC,YAAY;AACrD;AACA,6CAA6C,0BAA0B;AACvE;;AAEA,uCAAuC,eAAe;AACtD;AACA;AACA,OAAO;AACP;AACA,6CAA6C,UAAU;AACvD;;AAEA,kCAAkC,yBAAyB;AAC3D;AACA;AACA;AACA,uDAAuD,uBAAuB;AAC9E;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,iBAAiB;AACzD,0DAA0D,aAAa;AACvE;AACA,wDAAwD,sCAAsC;AAC9F;AACA;AACA;AACA,2CAA2C,oCAAoC;AAC/E,gBAAgB,oBAAoB;AACpC;AACA;AACA;;AAEA,2BAA2B,qBAAqB;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,2CAA2C;AACvG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACtbA,WAAW,mBAAO,CAAC,GAAI;AACvB,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;;AAEA;;AAEA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gBAAgB,QAAQ,0BAA0B;AAC5G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,UAAU;AAC9C;AACA,iEAAiE,UAAU;AAC3E;AACA;;AAEA,mDAAmD,qBAAqB;AACxE;AACA,gFAAgF,qBAAqB;AACrG;AACA;;AAEA,oDAAoD,qBAAqB;AACzE;AACA,iFAAiF,qBAAqB;AACtG;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC5IA,eAAe,mBAAO,CAAC,GAAmB;AAC1C,gBAAgB,mBAAO,CAAC,GAAoB;;AAE5C;AACA;AACA;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,iBAAiB;AACjC;AACA,qDAAqD,iBAAiB;AACtE;AACA,+BAA+B,aAAa;AAC5C;;AAEA,iBAAiB,oBAAoB;AACrC;AACA,+BAA+B,mCAAmC;AAClE;;AAEA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA,mEAAmE,iBAAiB;AACpF;AACA,+EAA+E,aAAa;AAC5F;AACA;AACA;AACA;AACA,8CAA8C,uCAAuC;AACrF;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mCAAmC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mCAAmC;AAC1E;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gCAAgC;AAChF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,qEAAqE,+BAA+B;AACpG;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AChNA;AACA;;AAEA;AACA,iBAAiB,mDAAmD;AACpE;AACA;;AAEA;AACA;AACA,uCAAuC,6CAA6C;AACpF,OAAO;AACP,yCAAyC,mDAAmD;AAC5F;AACA,wCAAwC,6CAA6C;AACrF;;AAEA,uBAAuB,6CAA6C;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,MAAM;AACtC;AACA;;AAEA;AACA;AACA,0CAA0C,UAAU;AACpD,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC;;AAEA,YAAY;AACZ;AACA,qCAAqC;AACrC,eAAe;AACf;;AAEA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA,yBAAyB,mDAAmD;AAC5E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gCAAgC,MAAM;AACtC;AACA;;AAEA;AACA;AACA,iIAAiI,UAAU;AAC3I,OAAO;AACP;AACA;;AAEA;AACA;AACA,2CAA2C,UAAU;AACrD,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC;;AAEA,YAAY;AACZ;AACA,qCAAqC;AACrC,eAAe;AACf,eAAe;AACf;;AAEA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA,0BAA0B,6CAA6C;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,MAAM;AACtC;AACA;;AAEA;AACA;AACA,qIAAqI,UAAU;AAC/I,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,cAAc;AAChC;;AAEA,YAAY;AACZ;AACA,qCAAqC;AACrC,eAAe;AACf;;AAEA,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AClMA;AACA;;AAEA;AACA,aAAa,YAAY;AACzB,gDAAgD,YAAY;AAC5D;;AAEA;;AAEA;AACA;;;;;;;;ACXA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;;;;AChuCAAuC;AAClD,WAAW,oDAAoD;AAC/D,WAAW,8DAA8D;AACzE,WAAW,qDAAqD;AAChE,WAAW,+DAA+D;AAC1E,WAAW,sDAAsD;AACjE,WAAW,gEAAgE;AAC3E,WAAW,qDAAqD;AAChE,WAAW,+DAA+D;AAC1E,WAAW,sDAAsD;AACjE,WAAW,gEAAgE;AAC3E,WAAW,uDAAuD;AAClE,WAAW,iEAAiE;AAC5E,WAAW,2CAA2C;AACtD,WAAW,2CAA2C;AACtD;AACA,oDAAoD,uCAAuC;AAC3F;AACA;;AAEA,kBAAkB;;AAElB;;AAEA;AACA;;;;;;;;AC/MA,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,yBAAyB,mBAAO,CAAC,GAA8B;AAC/D,yBAAyB,mBAAO,CAAC,GAA8B;AAC/D,yBAAyB,mBAAO,CAAC,EAA8B;AAC/D,sBAAsB,mBAAO,CAAC,EAA2B;AACzD,sBAAsB,mBAAO,CAAC,GAA2B;AACzD,sBAAsB,mBAAO,CAAC,CAA2B;AACzD,0BAA0B,mBAAO,CAAC,GAA+B;AACjE,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,iBAAiB,mBAAO,CAAC,GAAqB;AAC9C,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,4BAA4B,mBAAO,CAAC,GAAgC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC3BA,iBAAiB,mBAAO,CAAC,GAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,qFAAqF,UAAU;AAC/F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACzDA,mBAAmB,wBAAwB;AAC3C;;AAEA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;;AAEA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;;;;;;;ACrBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1BA;AACA,WAAW,mBAAO,CAAC,GAAmB;AACtC,WAAW,mBAAO,CAAC,EAAmB;AACtC;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACnFA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACrBA,aAAa,mBAAO,CAAC,GAAsB;AAC3C,gBAAgB,mBAAO,CAAC,GAAyB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA,eAAe,mBAAO,CAAC,EAAoB;AAC3C,gBAAgB,mBAAO,CAAC,EAAqB;AAC7C,eAAe,mBAAO,CAAC,GAAoB;AAC3C,kBAAkB,mBAAO,CAAC,GAAuB;AACjD,qBAAqB,mBAAO,CAAC,GAA0B;AACvD,qBAAqB,mBAAO,CAAC,EAA0B;;AAEvD;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,mBAAO,CAAC,GAAW;AAClC;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,sBAAsB,mBAAO,CAAC,EAAkB;AAChD;AACA,mBAAmB,mBAAO,CAAC,GAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,GAAa;AACtC;AACA,eAAe,mBAAO,CAAC,GAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC1CA;AACA,kBAAkB,mBAAO,CAAC,GAAgC;AAC1D,0BAA0B,mBAAO,CAAC,GAA8B;AAChE,2BAA2B,mBAAO,CAAC,GAA+B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;ACjEA;AACA;AACA;AACA,kBAAkB,2BAA2B,uBAAuB,EAAE;AACtE;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,8BAA8B,wBAAwB,EAAE;AAC1E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,qCAAqC,wBAAwB,EAAE;AACjF;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,sCAAsC,wBAAwB,EAAE;AAClF;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,kCAAkC,wBAAwB,EAAE;AAC9E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,+BAA+B,uBAAuB,EAAE;AAC1E;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,sCAAsC,wBAAwB,EAAE;AAClF;AACA;AACA;AACA;;;;;;;;ACPA,gBAAgB,mBAAO,CAAC,GAAoB;AAC5C,uBAAuB,mBAAO,CAAC,GAA2B;AAC1D,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,aAAa,mBAAO,CAAC,GAAiB;AACtC,oBAAoB,mBAAO,CAAC,GAAwB;AACpD,iBAAiB,mBAAO,CAAC,GAAqB;AAC9C,wBAAwB,mBAAO,CAAC,GAA4B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;AACA;AACA;AACA,KAAK,0DAA0D;AAC/D,KAAK,yDAAyD;AAC9D;AACA,KAAK,mEAAmE;AACxE,KAAK,mEAAmE;AACxE,KAAK,0EAA0E;AAC/E;AACA;AACA;;;;;;;;ACXA;;AAEA;;AAEA,kBAAkB,gBAAgB;AAClC,8CAA8C,gBAAgB;AAC9D;;AAEA,iBAAiB,gBAAgB;AACjC,6CAA6C,gBAAgB;AAC7D;;AAEA;AACA;AACA;;;;;;;;;ACdA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;AClBA,aAAa,mBAAO,CAAC,GAAmB;AACxC,gBAAgB,mBAAO,CAAC,GAAsB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA,sC;;;;;;;;ACAA,gC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UCtBA;UACA;UACA;UACA","file":"backend.js","sourcesContent":["module.exports = app => {\n  const aops = {};\n  return aops;\n};\n","module.exports = app => {\n\n  class Atom extends app.meta.AtomBase {\n\n    async create({ atomClass, item, user }) {\n      // super\n      const key = await super.create({ atomClass, item, user });\n      // add flowDef\n      const res = await this.ctx.model.flowDef.insert({\n        atomId: key.atomId,\n      });\n      const itemId = res.insertId;\n      // add content\n      await this.ctx.model.flowDefContent.insert({\n        atomId: key.atomId,\n        itemId,\n        content: '{}',\n      });\n      return { atomId: key.atomId, itemId };\n    }\n\n    async read({ atomClass, options, key, user }) {\n      // super\n      const item = await super.read({ atomClass, options, key, user });\n      if (!item) return null;\n      // meta\n      this._getMeta(item);\n      // ok\n      return item;\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // super\n      await super.select({ atomClass, options, items, user });\n      // meta\n      for (const item of items) {\n        this._getMeta(item);\n      }\n    }\n\n    async write({ atomClass, target, key, item, options, user }) {\n      // super\n      await super.write({ atomClass, target, key, item, options, user });\n      // update flowDef\n      const data = await this.ctx.model.flowDef.prepareData(item);\n      data.id = key.itemId;\n      await this.ctx.model.flowDef.update(data);\n      // update content\n      await this.ctx.model.flowDefContent.update({\n        content: item.content,\n      }, { where: {\n        atomId: key.atomId,\n      } });\n\n      // deploy\n      if (item.atomStage === 1) {\n        const _atom = await this.ctx.bean.atom.modelAtom.get({ id: key.atomId });\n        if (_atom.atomDisabled === 0) {\n          this.ctx.tail(async () => {\n            await this.ctx.bean.flowDef.deploy({ flowDefId: key.atomId });\n          });\n        }\n      }\n    }\n\n    async delete({ atomClass, key, user }) {\n      // delete flowDef\n      await this.ctx.model.flowDef.delete({\n        id: key.itemId,\n      });\n      // delete content\n      await this.ctx.model.flowDefContent.delete({\n        itemId: key.itemId,\n      });\n      // super\n      await super.delete({ atomClass, key, user });\n    }\n\n    async enable({ atomClass, key, user }) {\n      // super\n      await super.enable({ atomClass, key, user });\n      // deploy\n      this.ctx.tail(async () => {\n        await this.ctx.bean.flowDef.deploy({ flowDefId: key.atomId });\n      });\n    }\n\n    _getMeta(item) {\n      // flags\n      const flags = [];\n      // meta\n      const meta = {\n        summary: item.description,\n        flags,\n      };\n      // ok\n      item._meta = meta;\n    }\n\n  }\n\n  return Atom;\n};\n","const vm = require('vm');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Flow {\n\n    get modelFlow() {\n      return ctx.model.module(moduleInfo.relativeName).flow;\n    }\n    get modelFlowHistory() {\n      return ctx.model.module(moduleInfo.relativeName).flowHistory;\n    }\n    get modelFlowNode() {\n      return ctx.model.module(moduleInfo.relativeName).flowNode;\n    }\n    get modelFlowNodeHistory() {\n      return ctx.model.module(moduleInfo.relativeName).flowNodeHistory;\n    }\n\n    get sqlProcedure() {\n      return ctx.bean._getBean(moduleInfo.relativeName, 'local.procedure');\n    }\n\n    async startByKey({ flowDefKey, flowAtomId, flowVars, flowUserId, startEventId }) {\n      // fullKey\n      const { fullKey } = ctx.bean.flowDef._combineFullKey({ flowDefKey });\n      // get flow def\n      const flowDef = await ctx.bean.flowDef.getByKey({ flowDefKey });\n      if (!flowDef) ctx.throw.module(moduleInfo.relativeName, 1001, fullKey);\n      if (flowDef.atomDisabled === 1) ctx.throw.module(moduleInfo.relativeName, 1002, fullKey);\n      return await this._start({ flowDef, flowAtomId, flowVars, flowUserId, startEventId });\n    }\n\n    async startById({ flowDefId, flowAtomId, flowVars, flowUserId, startEventId }) {\n      // get flow def\n      const flowDef = await ctx.bean.flowDef.getById({ flowDefId });\n      if (!flowDef) ctx.throw.module(moduleInfo.relativeName, 1001, flowDefId);\n      if (flowDef.atomDisabled === 1) ctx.throw.module(moduleInfo.relativeName, 1002, flowDef.atomStaticKey);\n      return await this._start({ flowDef, flowAtomId, flowVars, flowUserId, startEventId });\n    }\n\n    evaluateExpression({ expression, globals }) {\n      return vm.runInContext(expression, vm.createContext(globals || {}));\n    }\n\n    async executeService({ bean, parameterExpression, parameter, globals }) {\n      if (parameterExpression !== undefined) {\n        parameter = this.evaluateExpression({ expression: parameterExpression, globals });\n      }\n      return await this._executeServiceInner({ bean, parameter, globals });\n    }\n\n    async _executeServiceInner({ bean, parameter, globals }) {\n      if (!bean) throw new Error('flow service bean is not set');\n      // bean\n      const beanFullName = `${bean.module}.flow.service.${bean.name}`;\n      const beanInstance = ctx.bean._getBean(beanFullName);\n      if (!beanInstance) throw new Error(`bean not found: ${beanFullName}`);\n      if (Object.getPrototypeOf(Object.getPrototypeOf(beanInstance)).constructor.name !== 'FlowServiceBase') {\n        throw new Error(`bean should extends FlowServiceBase: ${beanFullName}`);\n      }\n      // context\n      const context = Object.assign({ }, globals);\n      if (parameter !== undefined) {\n        context.parameter = parameter;\n      }\n      return await beanInstance.execute(context);\n    }\n\n    async _start({ flowDef, flowAtomId, flowVars, flowUserId, startEventId }) {\n      // flowInstance\n      const flowInstance = this._createFlowInstance({ flowDef });\n      // start\n      await flowInstance.start({ flowAtomId, flowVars, flowUserId, startEventId });\n      // ok\n      return flowInstance;\n    }\n\n    async _loadFlowInstance({ flowId, history }) {\n      // flow\n      let flow;\n      if (!history) {\n        flow = await this.modelFlow.get({ id: flowId });\n      } else {\n        flow = await this.modelFlowHistory.get({ flowId });\n      }\n      if (!flow) ctx.throw.module(moduleInfo.relativeName, 1003, flowId);\n      // flowDef: by key+revision\n      const flowDef = await ctx.bean.flowDef.getByKeyAndRevision({ flowDefKey: flow.flowDefKey, flowDefRevision: flow.flowDefRevision });\n      if (!flowDef) ctx.throw.module(moduleInfo.relativeName, 1001, flow.flowDefId);\n      // not check atomDisabled\n      // flowInstance\n      const flowInstance = this._createFlowInstance({ flowDef });\n      // load\n      await flowInstance._load({ flow, history });\n      // ok\n      return flowInstance;\n    }\n\n    _createFlowInstance({ flowDef }) {\n      const flowInstance = ctx.bean._newBean(`${moduleInfo.relativeName}.local.flow.flow`, {\n        flowDef,\n      });\n      return flowInstance;\n    }\n\n    async _loadFlowNodeInstance({ flowNodeId, history }) {\n      // get\n      let flowNode;\n      if (!history) {\n        flowNode = await this.modelFlowNode.get({ id: flowNodeId });\n      } else {\n        flowNode = await this.modelFlowNodeHistory.get({ flowNodeId });\n      }\n      if (!flowNode) ctx.throw.module(moduleInfo.relativeName, 1004, flowNodeId);\n      // load flow\n      const flowInstance = await this._loadFlowInstance({ flowId: flowNode.flowId, history });\n      // load flow node\n      const flowNodeInstance = await flowInstance._loadNodeInstance({ flowNode, history });\n      return flowNodeInstance;\n    }\n\n    async normalizeAssignees({ users, roles, vars }) {\n      const assignees = {};\n      assignees.users = await this._normalizeAssignees_users(users);\n      assignees.roles = await this._normalizeAssignees_roles(roles);\n      assignees.vars = await this._normalizeAssignees_vars(vars);\n      return assignees;\n    }\n\n    async _normalizeAssignees_users(str) {\n      if (!str) return [];\n      // userIds\n      const userIds = await this._parseAssignees_userIds(str);\n      if (userIds.length === 0) return [];\n      // select\n      return await ctx.bean.user.select({\n        options: {\n          where: {\n            'a.disabled': 0,\n            'a.id': userIds,\n          },\n          orders: [[ 'a.userName', 'asc' ]],\n          removePrivacy: true,\n        },\n      });\n    }\n\n    async _normalizeAssignees_roles(str) {\n      if (!str) return [];\n      // roleIds\n      const roleIds = await this._parseAssignees_roleIds(str);\n      if (roleIds.length === 0) return [];\n      // select\n      return await ctx.bean.role.model.select({\n        where: {\n          id: roleIds,\n        },\n      });\n    }\n\n    async _normalizeAssignees_vars(str) {\n      if (!str) return [];\n      // vars\n      const _vars = await this._parseAssignees_vars(str);\n      // title\n      return _vars.map(item => {\n        let title;\n        if (item === 'flowUser') {\n          title = 'FlowInitiator';\n        } else {\n          title = item;\n        }\n        // others\n        return {\n          name: item,\n          title,\n          titleLocale: ctx.text(title),\n        };\n      });\n    }\n\n    async _parseAssignees_userIds(str) {\n      if (!str) return null;\n      if (!Array.isArray(str)) {\n        str = str.toString().split(',');\n      }\n      return str.map(item => {\n        return typeof item === 'object' ? item.id : parseInt(item);\n      });\n    }\n\n    async _parseAssignees_roleIds(str) {\n      if (!str) return null;\n      if (!Array.isArray(str)) {\n        str = str.toString().split(',');\n      }\n      const arr = [];\n      for (const item of str) {\n        if (typeof item === 'object') {\n          // object\n          arr.push(item.id);\n        } else if (isNaN(item)) {\n          // string\n          const role = await ctx.bean.role.parseRoleName({ roleName: item });\n          if (!role) ctx.throw.module(moduleInfo.relativeName, 1007, item);\n          arr.push(role.id);\n        } else {\n          // number\n          arr.push(item);\n        }\n      }\n      // ok\n      return arr;\n    }\n\n    async _parseAssignees_vars(str) {\n      if (!str) return null;\n      if (!Array.isArray(str)) {\n        str = str.toString().split(',');\n      }\n      return str.map(item => {\n        return typeof item === 'object' ? item.name : item;\n      });\n    }\n\n    async count({ options, user }) {\n      return await this.select({ options, user, count: 1 });\n    }\n\n    async select({ options, user, pageForce = true, count = 0 }) {\n      const items = await this._list({ options, user, pageForce, count });\n      for (const item of items) {\n        if (item.flowNodeNameCurrent) {\n          item.flowNodeNameCurrentLocale = ctx.text(item.flowNodeNameCurrent);\n        }\n        if (item.flowRemark) {\n          item.flowRemarkLocale = ctx.text(item.flowRemark);\n        }\n      }\n      return items;\n    }\n\n    async get({ flowId, history, user }) {\n      const flows = await this.select({\n        options: {\n          where: {\n            'a.id': flowId,\n          },\n          mode: history ? 'history' : 'flowing',\n        },\n        user,\n      });\n      return flows[0];\n    }\n\n    // mode: mine/others/flowing/history\n    async _list({ options: { where, orders, page, mode }, user, pageForce = true, count = 0 }) {\n      page = ctx.bean.util.page(page, pageForce);\n      const sql = this.sqlProcedure.selectFlows({\n        iid: ctx.instance.id,\n        userIdWho: user ? user.id : 0,\n        where, orders, page,\n        count,\n        mode,\n      });\n      const res = await ctx.model.query(sql);\n      return count ? res[0]._count : res;\n    }\n\n  }\n\n  return Flow;\n};\n","\nconst __flowNodeBases = {};\nconst __flowEdgeBases = {};\nconst __flowServiceBases = {};\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class FlowDef {\n\n    get modelFlowDef() {\n      return ctx.model.module(moduleInfo.relativeName).flowDef;\n    }\n    get modelFlowDefContent() {\n      return ctx.model.module(moduleInfo.relativeName).flowDefContent;\n    }\n    get modelFlowDefFull() {\n      return ctx.model.module(moduleInfo.relativeName).flowDefFull;\n    }\n    get atomClass() {\n      return {\n        module: moduleInfo.relativeName,\n        atomClassName: 'flowDef',\n      };\n    }\n\n    async getByKey({ flowDefKey }) {\n      return await this._getByKey({ flowDefKey, atomStage: 'formal' });\n    }\n\n    async getById({ flowDefId }) {\n      // get\n      return await this._getById({ flowDefId });\n    }\n\n    async getByKeyAndRevision({ flowDefKey, flowDefRevision }) {\n      // get from formal\n      let flowDef = await this._getByKey({ flowDefKey, flowDefRevision, atomStage: 'formal' });\n      if (flowDef) return flowDef;\n      // get from history\n      flowDef = await this._getByKey({ flowDefKey, flowDefRevision, atomStage: 'history' });\n      if (flowDef) return flowDef;\n      // not found\n      return null;\n    }\n\n    async deploy({ flowDefId }) {\n      // queue\n      await ctx.app.meta.queue.pushAsync({\n        subdomain: ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'deploy',\n        queueNameSub: flowDefId,\n        data: { flowDefId },\n      });\n    }\n\n    async _deployQueue({ flowDefId }) {\n      // flowDef\n      const flowDef = await this._getById({ flowDefId });\n      if (!flowDef) return;\n      // content\n      const content = flowDef.content ? JSON.parse(flowDef.content) : null;\n      if (!content) return;\n      // all startEvents\n      for (const node of content.process.nodes) {\n        const nodeType = node.type;\n        if (nodeType.indexOf('startEvent') !== 0) continue;\n        const _nodeBase = this._getFlowNodeBase(nodeType);\n        const _nodeBaseBean = ctx.bean._newBean(_nodeBase.beanFullName);\n        if (_nodeBaseBean.deploy) {\n          await _nodeBaseBean.deploy({\n            deploy: flowDef.atomDisabled === 0,\n            flowDefId,\n            node,\n          });\n        }\n      }\n    }\n\n    async _getById({ flowDefId }) {\n      return await ctx.bean.atom.read({ key: { atomId: flowDefId } });\n    }\n\n    async _getByKey({ flowDefKey, flowDefRevision, atomStage }) {\n      // fullKey\n      const { fullKey } = this._combineFullKey({ flowDefKey });\n      // from db\n      return await ctx.bean.atom.readByStaticKey({\n        atomClass: this.atomClass,\n        atomStaticKey: fullKey,\n        atomRevision: flowDefRevision,\n        atomStage,\n      });\n    }\n\n    nodeBases() {\n      return this._getFlowNodeBases();\n    }\n\n    edgeBases() {\n      return this._getFlowEdgeBases();\n    }\n\n    flowServiceBases() {\n      return this._getFlowServiceBases();\n    }\n\n    _getFlowServiceBases() {\n      if (!__flowServiceBases[ctx.locale]) {\n        __flowServiceBases[ctx.locale] = this._prepareFlowServiceBases();\n      }\n      return __flowServiceBases[ctx.locale];\n    }\n\n    _getFlowNodeBases() {\n      if (!__flowNodeBases[ctx.locale]) {\n        __flowNodeBases[ctx.locale] = this._prepareFlowNodeBases();\n      }\n      return __flowNodeBases[ctx.locale];\n    }\n\n    _getFlowNodeBase(nodeType) {\n      return this._getFlowNodeBases()[nodeType];\n    }\n\n    _prepareFlowServiceBases() {\n      const flowServiceBases = {};\n      for (const module of ctx.app.meta.modulesArray) {\n        const relativeName = module.info.relativeName;\n        const beans = module.main.beans;\n        if (!beans) continue;\n        const res = this._prepareFlowServiceBasesModule(relativeName, beans);\n        if (Object.keys(res).length > 0) {\n          flowServiceBases[relativeName] = res;\n        }\n      }\n      return flowServiceBases;\n    }\n\n    _prepareFlowServiceBasesModule(relativeName, beans) {\n      const flowServiceBases = {};\n      for (const beanName in beans) {\n        if (beanName.indexOf('flow.service.') !== 0) continue;\n        // info\n        const bean = beans[beanName];\n        const serviceBase = {\n          title: bean.title,\n        };\n        if (bean.title) {\n          serviceBase.titleLocale = ctx.text(bean.title);\n        } else {\n          // prompt\n          ctx.logger.info('title of flow service bean should not be empty: ', `${relativeName}:${beanName}`);\n        }\n        // ok\n        const beanNameShort = beanName.substr('flow.service.'.length);\n        flowServiceBases[beanNameShort] = serviceBase;\n      }\n      return flowServiceBases;\n    }\n\n    _prepareFlowNodeBases() {\n      const flowNodeBases = {};\n      for (const module of ctx.app.meta.modulesArray) {\n        const nodes = module.main.meta && module.main.meta.flow && module.main.meta.flow.nodes;\n        if (!nodes) continue;\n        for (const key in nodes) {\n          const node = nodes[key];\n          const beanName = node.bean;\n          let beanFullName;\n          if (typeof beanName === 'string') {\n            beanFullName = `${module.info.relativeName}.flow.node.${beanName}`;\n          } else {\n            beanFullName = `${beanName.module || module.info.relativeName}.flow.node.${beanName.name}`;\n          }\n          // const fullKey = `${module.info.relativeName}:${key}`;\n          const fullKey = key;\n          flowNodeBases[fullKey] = {\n            ...node,\n            beanFullName,\n            titleLocale: ctx.text(node.title),\n          };\n        }\n      }\n      return flowNodeBases;\n    }\n\n    _getFlowEdgeBases() {\n      if (!__flowEdgeBases[ctx.locale]) {\n        __flowEdgeBases[ctx.locale] = this._prepareFlowEdgeBases();\n      }\n      return __flowEdgeBases[ctx.locale];\n    }\n\n    _getFlowEdgeBase(edgeType = 'sequence') {\n      return this._getFlowEdgeBases()[edgeType];\n    }\n\n    _prepareFlowEdgeBases() {\n      const flowEdgeBases = {};\n      for (const module of ctx.app.meta.modulesArray) {\n        const edges = module.main.meta && module.main.meta.flow && module.main.meta.flow.edges;\n        if (!edges) continue;\n        for (const key in edges) {\n          const edge = edges[key];\n          const beanName = edge.bean;\n          let beanFullName;\n          if (typeof beanName === 'string') {\n            beanFullName = `${module.info.relativeName}.flow.edge.${beanName}`;\n          } else {\n            beanFullName = `${beanName.module || module.info.relativeName}.flow.edge.${beanName.name}`;\n          }\n          // const fullKey = `${module.info.relativeName}:${key}`;\n          const fullKey = key;\n          flowEdgeBases[fullKey] = {\n            ...edge,\n            beanFullName,\n            titleLocale: ctx.text(edge.title),\n          };\n        }\n      }\n      return flowEdgeBases;\n    }\n\n    _combineFullKey({ flowDefKey }) {\n      let fullKey;\n      let dynamic;\n      if (typeof flowDefKey === 'string') {\n        dynamic = 1;\n        fullKey = flowDefKey;\n      } else {\n        dynamic = 0;\n        fullKey = `${flowDefKey.module}:${flowDefKey.name}`;\n      }\n      return { fullKey, dynamic };\n    }\n  }\n\n  return FlowDef;\n};\n","module.exports = ctx => {\n\n  class ContextEdge {\n\n    constructor({ context, contextNode, edgeDef }) {\n      this.context = context;\n      this.contextNode = contextNode;\n      this._edgeDef = edgeDef;\n      //\n      this._utils = null;\n    }\n\n    get utils() {\n      return this._utils;\n    }\n\n  }\n\n  return ContextEdge;\n};\n","module.exports = ctx => {\n\n  class ContextFlow {\n\n    constructor({ flowDef }) {\n      this._flowDef = flowDef;\n      this._flowDefContent = JSON.parse(this._flowDef.content);\n      //\n      this._flowId = null;\n      this._flow = null;\n      this._flowHistory = null;\n      this._flowVars = null;\n      //\n      this._atom = null;\n      //\n      this._utils = null;\n    }\n\n    get vars() {\n      return this._flowVars;\n    }\n\n    get atom() {\n      return this._atom;\n    }\n\n    get utils() {\n      return this._utils;\n    }\n\n  }\n\n  return ContextFlow;\n};\n","module.exports = ctx => {\n\n  class ContextNode {\n\n    constructor({ context, nodeDef }) {\n      this.context = context;\n      this._nodeDef = nodeDef;\n      //\n      this._flowNodeId = null;\n      this._flowNode = null;\n      this._flowNodeHistory = null;\n      this._nodeVars = null;\n      //\n      this._utils = null;\n    }\n\n    get vars() {\n      return this._nodeVars;\n    }\n\n    get utils() {\n      return this._utils;\n    }\n\n  }\n\n  return ContextNode;\n};\n","const UtilsFn = require('../common/utils.js');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class FlowEdge {\n    constructor({ flowInstance, context, contextNode, edgeDef }) {\n      this.flowInstance = flowInstance;\n      this.context = context;\n      this.contextNode = contextNode;\n      this._edgeBase = null;\n      this._edgeBaseBean = null;\n      // context\n      this.contextEdge = ctx.bean._newBean(`${moduleInfo.relativeName}.local.context.edge`, {\n        context, contextNode, edgeDef,\n      });\n    }\n\n    async init() {\n      // context init\n      await this._contextInit();\n    }\n\n    async _contextInit() {\n      // utils\n      this.contextEdge._utils = new (UtilsFn({ ctx, flowInstance: this.flowInstance }))({\n        context: this.context,\n        contextNode: this.contextNode,\n        contextEdge: this.contextEdge,\n      });\n    }\n\n    async _saveVars() {\n      // save flowVars\n      await this.flowInstance._saveFlowVars();\n    }\n\n    async enter() {\n      // raise event: onEdgeEnter\n      const res = await this.edgeBaseBean.onEdgeEnter();\n      await this._saveVars();\n      if (!res) return false;\n      return await this.take();\n    }\n\n    async take() {\n      // raise event: onEdgeTake\n      const res = await this.edgeBaseBean.onEdgeTake();\n      await this._saveVars();\n      if (!res) return false;\n      return await this.leave();\n    }\n\n    async leave() {\n      // raise event: onEdgeLeave\n      const res = await this.edgeBaseBean.onEdgeLeave();\n      await this._saveVars();\n      if (!res) return false;\n      // next\n      return await this.flowInstance.nextNode({ contextEdge: this.contextEdge });\n    }\n\n    get edgeBaseBean() {\n      if (!this._edgeBaseBean) {\n        this._edgeBaseBean = ctx.bean._newBean(this.edgeBase.beanFullName, {\n          flowInstance: this.flowInstance, edgeInstance: this,\n          context: this.context, contextNode: this.contextNode, contextEdge: this.contextEdge,\n        });\n      }\n      return this._edgeBaseBean;\n    }\n\n    get edgeBase() {\n      if (!this._edgeBase) this._edgeBase = ctx.bean.flowDef._getFlowEdgeBase(this.contextEdge._edgeDef.type);\n      return this._edgeBase;\n    }\n\n  }\n  return FlowEdge;\n};\n","const VarsFn = require('../common/vars.js');\nconst UtilsFn = require('../common/utils.js');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class FlowInstance {\n\n    constructor({ flowDef }) {\n      // context\n      this.context = ctx.bean._newBean(`${moduleInfo.relativeName}.local.context.flow`, {\n        flowDef,\n      });\n      // listener\n      this._flowListener = ctx.bean._newBean(`${moduleInfo.relativeName}.local.flow.listener`, {\n        flowInstance: this, context: this.context,\n      });\n    }\n\n    get modelAtom() {\n      return ctx.model.module('a-base').atom;\n    }\n    get modelFlow() {\n      return ctx.model.module(moduleInfo.relativeName).flow;\n    }\n    get modelFlowHistory() {\n      return ctx.model.module(moduleInfo.relativeName).flowHistory;\n    }\n    get modelFlowNode() {\n      return ctx.model.module(moduleInfo.relativeName).flowNode;\n    }\n    get modelFlowNodeHistory() {\n      return ctx.model.module(moduleInfo.relativeName).flowNodeHistory;\n    }\n    get constant() {\n      return ctx.constant.module(moduleInfo.relativeName);\n    }\n\n    async start({ flowName, flowAtomId, flowVars, flowUserId, startEventId }) {\n      if (!flowVars) flowVars = {};\n      if (flowUserId === undefined) flowUserId = 0;\n      // create flow\n      const flowId = await this._createFlow({ flowName, flowAtomId, flowVars, flowUserId });\n      // context init\n      await this._contextInit({ flowId });\n      // raise event: onFlowStart\n      await this._flowListener.onFlowStart({ flowVars, flowUserId, startEventId });\n      await this._saveFlowVars();\n      // node: startEvent\n      const nodeInstanceStartEvent = await this._findNodeInstanceStartEvent({ startEventId });\n      if (!nodeInstanceStartEvent) throw new Error(`startEvent not found: ${this.context._flowDef.atomStaticKey}.${startEventId || 'startEventNone'}`);\n      // node enter\n      const finished = await nodeInstanceStartEvent.enter();\n      if (!finished) {\n        // notify\n        this._notifyFlowInitiateds(flowUserId);\n        // console.log(`--------flow break: ${flowId}`);\n      }\n    }\n\n    async _load({ flow, history }) {\n      // context init\n      await this._contextInit({ flowId: flow.id, history });\n    }\n\n    async nextEdges({ contextNode }) {\n      const edgeInstances = await this._findEdgeInstancesNext({ nodeDefId: contextNode._nodeDef.id, contextNode });\n      if (edgeInstances.length === 0) return true;\n      for (const edgeInstance of edgeInstances) {\n        // check if end\n        if (this.context._flow.flowStatus !== this.constant.flow.status.flowing) {\n          return true;\n        }\n        // enter\n        const res = await edgeInstance.enter();\n        if (res) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    async nextNode({ contextEdge }) {\n      const nodeInstanceNext = await this._findNodeInstanceNext({\n        nodeDefId: contextEdge._edgeDef.target,\n        flowNodeIdPrev: contextEdge.contextNode._flowNodeId,\n      });\n      // enter\n      return await nodeInstanceNext.enter();\n    }\n\n    async _contextInit({ flowId, history }) {\n      // flowId\n      this.context._flowId = flowId;\n      // flow\n      if (!history) {\n        this.context._flow = await this.modelFlow.get({ id: flowId });\n      }\n      this.context._flowHistory = await this.modelFlowHistory.get({ flowId });\n      // flowVars\n      this.context._flowVars = new (VarsFn())();\n      this.context._flowVars._vars = this.context._flowHistory.flowVars ? JSON.parse(this.context._flowHistory.flowVars) : {};\n      // atom\n      if (!this.context._atom && this.context._flowHistory.flowAtomId) {\n        this.context._atom = await this._contextInit_atom({ atomId: this.context._flowHistory.flowAtomId });\n      }\n      // utils\n      this.context._utils = new (UtilsFn({ ctx, flowInstance: this }))({\n        context: this.context,\n      });\n    }\n\n    async _contextInit_atom({ atomId }) {\n      return await ctx.bean.atom.read({ key: { atomId } });\n    }\n\n    async _saveFlowVars() {\n      if (!this.context._flowVars._dirty) return;\n      // flow\n      this.context._flow.flowVars = JSON.stringify(this.context._flowVars._vars);\n      await this.modelFlow.update(this.context._flow);\n      // flow history\n      this.context._flowHistory.flowVars = this.context._flow.flowVars;\n      await this.modelFlowHistory.update(this.context._flowHistory);\n      // done\n      this.context._flowVars._dirty = false;\n    }\n\n    async _endFlow_handleAtom(options) {\n      if (!options.atom) return;\n      const atomId = this.context._flow.flowAtomId;\n      if (!atomId) return;\n      if (options.atom.submit) {\n        // submit: _submitDirect\n        await ctx.bean.atom._submitDirect({\n          key: { atomId },\n          item: this.context._atom,\n          user: { id: this.context._atom.userIdUpdated },\n        });\n      } else if (options.atom.close) {\n        // close draft\n        await ctx.bean.atom.closeDraft({\n          key: { atomId },\n        });\n      }\n    }\n\n    async _endFlow(options) {\n      options = options || {};\n      const flowHandleStatus = options.flowHandleStatus || 1;\n      const flowRemark = options.flowRemark || null;\n      const flowId = this.context._flowId;\n      const flowStatus = this.constant.flow.status.end;\n      const timeEnd = new Date();\n      // check if end\n      if (this.context._flow.flowStatus === flowStatus) {\n        ctx.throw.module(moduleInfo.relativeName, 1008, flowId);\n      }\n      // handle atom\n      await this._endFlow_handleAtom(options);\n      // tail\n      ctx.tail(async () => {\n        // need not in transaction\n        // flow: update fields for onFlowEnd\n        this.context._flow.flowStatus = flowStatus;\n        this.context._flow.flowHandleStatus = flowHandleStatus;\n        this.context._flow.flowRemark = flowRemark;\n        this.context._flow.timeEnd = timeEnd;\n        await this.modelFlow.delete({ id: flowId });\n        // flow history\n        this.context._flowHistory.flowStatus = flowStatus;\n        this.context._flowHistory.flowHandleStatus = flowHandleStatus;\n        this.context._flowHistory.flowRemark = flowRemark;\n        this.context._flowHistory.timeEnd = timeEnd;\n        await this.modelFlowHistory.update(this.context._flowHistory);\n        // raise event: onFlowEnd\n        await this._flowListener.onFlowEnd(options);\n        // clear nodes\n        await this._clearNodeRemains();\n        // publish uniform message\n        await this._endFlowPublish();\n        // log\n        // console.log(`--------flow end: ${flowId}`);\n      });\n      // notify\n      this._notifyFlowInitiateds(this.context._flow.flowUserId);\n    }\n\n    async _endFlowPublish() {\n      // publish uniform message\n      const userOp = this._getOpUser();\n      const flowUserId = this.context._flow.flowUserId;\n      if (flowUserId !== userOp.id) {\n        const userFlow = await ctx.bean.user.get({ id: flowUserId });\n        const title = `${ctx.text.locale(userFlow.locale, 'FlowTitle')} - ${ctx.text.locale(userFlow.locale, this.context._flow.flowRemark || 'End')}`;\n        const actionPath = `/a/flowtask/flow?flowId=${this.context._flowId}`;\n        const message = {\n          userIdTo: flowUserId,\n          content: {\n            issuerId: userFlow.id,\n            issuerName: userFlow.userName,\n            issuerAvatar: userFlow.avatar,\n            title,\n            body: this.context._flow.flowName,\n            actionPath,\n            params: {\n              flowId: this.context._flowId,\n            },\n          },\n        };\n        // jump out of the transaction\n        ctx.tail(async () => {\n          await ctx.bean.io.publish({\n            message,\n            messageClass: {\n              module: 'a-flow',\n              messageClassName: 'workflow',\n            },\n          });\n        });\n      }\n    }\n\n    async _clearNodeRemains() {\n      const flowId = this.context._flowId;\n      const flowNodes = await this.modelFlowNode.select({\n        where: { flowId },\n      });\n      for (const flowNode of flowNodes) {\n        const flowNodeInstance = await this._loadNodeInstance({ flowNode });\n        await flowNodeInstance._clearRemains();\n      }\n    }\n\n    async _createFlow({ flowName, flowAtomId, flowVars, flowUserId }) {\n      // flowName\n      if (!flowName && flowAtomId) {\n        this.context._atom = await this._contextInit_atom({ atomId: flowAtomId });\n        flowName = this.context._atom.atomName;\n      }\n      if (!flowName) {\n        flowName = this.context._flowDef.atomName;\n      }\n      // flow\n      const data = {\n        flowDefId: this.context._flowDef.atomId,\n        flowDefKey: this.context._flowDef.atomStaticKey,\n        flowDefRevision: this.context._flowDef.atomRevision,\n        flowStatus: this.constant.flow.status.flowing,\n        flowName,\n        flowAtomId,\n        flowVars: JSON.stringify(flowVars),\n        flowUserId,\n      };\n      const res = await this.modelFlow.insert(data);\n      const flowId = res.insertId;\n      // flowHistory\n      data.flowId = flowId;\n      await this.modelFlowHistory.insert(data);\n      // atom\n      await this.modelAtom.update({\n        id: flowAtomId,\n        atomFlowId: flowId,\n      });\n      // ok\n      return flowId;\n    }\n\n    _createNodeInstance2({ nodeDef }) {\n      const node = ctx.bean._newBean(`${moduleInfo.relativeName}.local.flow.node`, {\n        flowInstance: this, context: this.context, nodeDef,\n      });\n      return node;\n    }\n\n    async _loadNodeInstance({ flowNode, history }) {\n      const nodeDef = this._findNodeDef({ nodeDefId: flowNode.flowNodeDefId });\n      if (!nodeDef) ctx.throw.module(moduleInfo.relativeName, 1005, flowNode.flowNodeDefId);\n      const node = this._createNodeInstance2({ nodeDef });\n      await node._load({ flowNode, history });\n      return node;\n    }\n\n    async _createNodeInstance({ nodeDef, flowNodeIdPrev }) {\n      const node = this._createNodeInstance2({ nodeDef });\n      await node.init({ flowNodeIdPrev });\n      return node;\n    }\n\n    async _createEdgeInstance({ edgeDef, contextNode }) {\n      const edge = ctx.bean._newBean(`${moduleInfo.relativeName}.local.flow.edge`, {\n        flowInstance: this, context: this.context, contextNode, edgeDef,\n      });\n      await edge.init();\n      return edge;\n    }\n\n    _findNodeDef({ nodeDefId }) {\n      const nodeDef = this.context._flowDefContent.process.nodes.find(node => {\n        return nodeDefId === node.id;\n      });\n      return nodeDef;\n    }\n\n    async _findNodeInstanceNext({ nodeDefId, flowNodeIdPrev }) {\n      const nodeDef = this._findNodeDef({ nodeDefId });\n      if (!nodeDef) return null;\n      return await this._createNodeInstance({ nodeDef, flowNodeIdPrev });\n    }\n\n    async _findNodeInstanceStartEvent({ startEventId }) {\n      const nodeDef = this.context._flowDefContent.process.nodes.find(node => {\n        return (startEventId && startEventId === node.id) || (!startEventId && node.type === 'startEventNone');\n      });\n      if (!nodeDef) return null;\n      return await this._createNodeInstance({ nodeDef });\n    }\n\n    async _findEdgeInstancesNext({ nodeDefId, contextNode }) {\n      const edges = [];\n      for (const edgeDef of this.context._flowDefContent.process.edges) {\n        if (edgeDef.source === nodeDefId) {\n          const edge = await this._createEdgeInstance({ edgeDef, contextNode });\n          edges.push(edge);\n        }\n      }\n      return edges;\n    }\n\n    // find from history\n    async _findFlowNodeHistoryPrevious({ flowNodeId, cb }) {\n      let flowNode = await this.modelFlowNodeHistory.get({ flowNodeId });\n      while (flowNode && flowNode.flowNodeIdPrev !== 0) {\n        flowNode = await this.modelFlowNodeHistory.get({ flowNodeId: flowNode.flowNodeIdPrev });\n        if (!flowNode) return null;\n        if (!cb) return flowNode;\n        // nodeDef\n        const nodeDef = this._findNodeDef({ nodeDefId: flowNode.flowNodeDefId });\n        if (cb({ flowNode, nodeDef })) return flowNode;\n      }\n      return null;\n    }\n\n    async _parseAssignees({ users, roles, vars }) {\n      // init\n      let assignees = [];\n\n      // 1. users\n      const _users = await this._parseAssignees_users(users);\n      if (_users) {\n        assignees = assignees.concat(_users);\n      }\n\n      // 2. roles\n      const _roles = await this._parseAssignees_roles(roles);\n      if (_roles) {\n        assignees = assignees.concat(_roles);\n      }\n\n      // 3. vars\n      const _vars = await this._parseAssignees_vars(vars);\n      if (_vars) {\n        assignees = assignees.concat(_vars);\n      }\n\n      // unique\n      assignees = Set.unique(assignees);\n\n      // ok\n      return assignees;\n    }\n\n    async _parseAssignees_users(str) {\n      if (!str) return null;\n      return await ctx.bean.flow._parseAssignees_userIds(str);\n    }\n\n    async _parseAssignees_roles(str) {\n      if (!str) return null;\n      // roleIds\n      const roleIds = await ctx.bean.flow._parseAssignees_roleIds(str);\n      // users\n      let users = [];\n      for (const roleId of roleIds) {\n        const list = await ctx.bean.role.usersOfRoleParent({ roleId, disabled: 0, removePrivacy: true });\n        users = users.concat(list.map(item => item.id));\n      }\n      // ok\n      return users;\n    }\n\n    async _parseAssignees_vars(str) {\n      if (!str) return null;\n      // vars\n      const _vars = await ctx.bean.flow._parseAssignees_vars(str);\n      // users\n      let users = [];\n      for (const _var of _vars) {\n        const userId = await this._parseUserVar({ _var });\n        if (userId) {\n          if (Array.isArray(userId)) {\n            users = users.concat(userId);\n          } else {\n            users.push(userId);\n          }\n        }\n      }\n      // ok\n      return users;\n    }\n\n    async _parseUserVar({ _var }) {\n      if (_var === 'flowUser') {\n        return this.context._flow.flowUserId;\n      }\n    }\n\n    _getOpUser() {\n      let user = ctx.state.user && ctx.state.user.op;\n      if (!user || user.anonymous === 1) {\n        user = { id: 0 };\n        // user = { id: this.context._flow.flowUserId };\n      }\n      return user;\n    }\n\n    _notifyFlowInitiateds(flowUserId) {\n      if (flowUserId) {\n        ctx.bean.stats.notify({\n          module: moduleInfo.relativeName,\n          name: 'flowInitiateds',\n          user: { id: flowUserId },\n        });\n      }\n    }\n\n  }\n\n  return FlowInstance;\n};\n","const vm = require('vm');\nconst require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = ctx => {\n\n  class FlowListener {\n\n    constructor({ flowInstance, context }) {\n      this.flowInstance = flowInstance;\n      this.context = context;\n      this._flowListener = undefined;\n    }\n\n    get flowListener() {\n      if (this._flowListener !== undefined) return this._flowListener;\n      // content\n      const listenerContent = this.context._flowDefContent.listener;\n      if (!listenerContent) {\n        this._flowListener = null;\n        return this._flowListener;\n      }\n      // sandbox\n      let sandbox = {};\n      if (ctx.app.meta.isTest || ctx.app.meta.isLocal) {\n        sandbox.assert = assert;\n        sandbox.console = console;\n      } else {\n        sandbox.assert = () => {};\n        sandbox.console = (...args) => {\n          console.log(...args);\n        };\n      }\n      sandbox = vm.createContext(sandbox);\n      // class\n      const FlowListenerFn = vm.compileFunction(`return ${listenerContent}`, [], { parsingContext: sandbox });\n      // new class\n      this._flowListener = new (FlowListenerFn())(this.context);\n      return this._flowListener;\n    }\n\n    async onFlowStart(options) {\n      if (this.flowListener && this.flowListener.onFlowStart) {\n        await this.flowListener.onFlowStart(options);\n      }\n    }\n\n    async onFlowEnd(options) {\n      if (this.flowListener && this.flowListener.onFlowEnd) {\n        await this.flowListener.onFlowEnd(options);\n      }\n    }\n\n    async onNodeEnter(contextNode) {\n      if (this.flowListener && this.flowListener.onNodeEnter) {\n        await this.flowListener.onNodeEnter(contextNode);\n      }\n    }\n\n    async onNodeBegin(contextNode) {\n      if (this.flowListener && this.flowListener.onNodeBegin) {\n        await this.flowListener.onNodeBegin(contextNode);\n      }\n    }\n\n    async onNodeDoing(contextNode) {\n      if (this.flowListener && this.flowListener.onNodeDoing) {\n        await this.flowListener.onNodeDoing(contextNode);\n      }\n    }\n\n    async onNodeEnd(contextNode) {\n      if (this.flowListener && this.flowListener.onNodeEnd) {\n        await this.flowListener.onNodeEnd(contextNode);\n      }\n    }\n\n    async onNodeLeave(contextNode) {\n      if (this.flowListener && this.flowListener.onNodeLeave) {\n        await this.flowListener.onNodeLeave(contextNode);\n      }\n    }\n\n    async onEdgeEnter(contextEdge, contextNode) {\n      if (this.flowListener && this.flowListener.onEdgeEnter) {\n        await this.flowListener.onEdgeEnter(contextEdge, contextNode);\n      }\n    }\n\n    async onEdgeTake(contextEdge, contextNode) {\n      if (this.flowListener && this.flowListener.onEdgeTake) {\n        await this.flowListener.onEdgeTake(contextEdge, contextNode);\n      }\n    }\n\n    async onEdgeLeave(contextEdge, contextNode) {\n      if (this.flowListener && this.flowListener.onEdgeLeave) {\n        await this.flowListener.onEdgeLeave(contextEdge, contextNode);\n      }\n    }\n\n    async onTaskCreated(contextTask, contextNode) {\n      if (this.flowListener && this.flowListener.onTaskCreated) {\n        await this.flowListener.onTaskCreated(contextTask, contextNode);\n      }\n    }\n\n    async onTaskClaimed(contextTask, contextNode) {\n      if (this.flowListener && this.flowListener.onTaskClaimed) {\n        await this.flowListener.onTaskClaimed(contextTask, contextNode);\n      }\n    }\n\n    async onTaskCompleted(contextTask, contextNode) {\n      if (this.flowListener && this.flowListener.onTaskCompleted) {\n        await this.flowListener.onTaskCompleted(contextTask, contextNode);\n      }\n    }\n\n    getNodeDefOptions(contextNode, { options }) {\n      if (this.flowListener && this.flowListener.getNodeDefOptions) {\n        return this.flowListener.getNodeDefOptions(contextNode, { options });\n      }\n    }\n\n    async getSchemaRead(contextTask, contextNode, { schemaBase, schema }) {\n      if (this.flowListener && this.flowListener.getSchemaRead) {\n        return await this.flowListener.getSchemaRead(contextTask, contextNode, { schemaBase, schema });\n      }\n    }\n\n    async getSchemaWrite(contextTask, contextNode, { schemaBase, schema }) {\n      if (this.flowListener && this.flowListener.getSchemaWrite) {\n        return await this.flowListener.getSchemaWrite(contextTask, contextNode, { schemaBase, schema });\n      }\n    }\n\n  }\n\n  return FlowListener;\n};\n","const VarsFn = require('../common/vars.js');\nconst UtilsFn = require('../common/utils.js');\n\nmodule.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class FlowNode {\n    constructor({ flowInstance, context, nodeDef }) {\n      this.flowInstance = flowInstance;\n      this.context = context;\n      this._nodeBase = null;\n      this._nodeBaseBean = null;\n      // context\n      this.contextNode = ctx.bean._newBean(`${moduleInfo.relativeName}.local.context.node`, {\n        context, nodeDef,\n      });\n    }\n\n    get modelFlow() {\n      return ctx.model.module(moduleInfo.relativeName).flow;\n    }\n    get modelFlowHistory() {\n      return ctx.model.module(moduleInfo.relativeName).flowHistory;\n    }\n    get modelFlowNode() {\n      return ctx.model.module(moduleInfo.relativeName).flowNode;\n    }\n    get modelFlowNodeHistory() {\n      return ctx.model.module(moduleInfo.relativeName).flowNodeHistory;\n    }\n\n    async init({ flowNodeIdPrev }) {\n      // create flowNode\n      const flowNodeId = await this._createFlowNode({ flowNodeIdPrev });\n      // context init\n      await this._contextInit({ flowNodeId });\n    }\n\n    async _load({ flowNode, history }) {\n      // context init\n      await this._contextInit({ flowNodeId: flowNode.id, history });\n    }\n\n    async _createFlowNode({ flowNodeIdPrev = 0 }) {\n      // flowNode\n      const data = {\n        flowId: this.context._flowId,\n        flowNodeDefId: this.contextNode._nodeDef.id,\n        flowNodeName: this.contextNode._nodeDef.name,\n        flowNodeType: this.contextNode._nodeDef.type,\n        flowNodeIdPrev,\n        nodeVars: '{}',\n      };\n      const res = await this.modelFlowNode.insert(data);\n      const flowNodeId = res.insertId;\n      // flowNodeHistory\n      data.flowNodeId = flowNodeId;\n      await this.modelFlowNodeHistory.insert(data);\n      // ok\n      return flowNodeId;\n    }\n\n    async _contextInit({ flowNodeId, history }) {\n      // flowNodeId\n      this.contextNode._flowNodeId = flowNodeId;\n      // flowNode\n      if (!history) {\n        this.contextNode._flowNode = await this.modelFlowNode.get({ id: flowNodeId });\n      }\n      this.contextNode._flowNodeHistory = await this.modelFlowNodeHistory.get({ flowNodeId });\n      // nodeVars\n      this.contextNode._nodeVars = new (VarsFn())();\n      this.contextNode._nodeVars._vars = this.contextNode._flowNodeHistory.nodeVars ? JSON.parse(this.contextNode._flowNodeHistory.nodeVars) : {};\n      // utils\n      this.contextNode._utils = new (UtilsFn({ ctx, flowInstance: this.flowInstance }))({\n        context: this.context,\n        contextNode: this.contextNode,\n      });\n    }\n\n    async _saveNodeVars() {\n      if (!this.contextNode._nodeVars._dirty) return;\n      // flowNode\n      this.contextNode._flowNode.nodeVars = JSON.stringify(this.contextNode._nodeVars._vars);\n      await this.modelFlowNode.update(this.contextNode._flowNode);\n      // flowNode history\n      this.contextNode._flowNodeHistory.nodeVars = this.contextNode._flowNode.nodeVars;\n      await this.modelFlowNodeHistory.update(this.contextNode._flowNodeHistory);\n      // done\n      this.contextNode._nodeVars._dirty = false;\n    }\n\n    async _saveVars() {\n      // save nodeVars\n      await this._saveNodeVars();\n      // save flowVars\n      await this.flowInstance._saveFlowVars();\n    }\n\n    async _setCurrent(clear) {\n      // flow\n      this.context._flow.flowNodeIdCurrent = clear ? 0 : this.contextNode._flowNodeId;\n      this.context._flow.flowNodeNameCurrent = clear ? '' : this.contextNode._nodeDef.name;\n      await this.modelFlow.update(this.context._flow);\n      // flow history\n      this.context._flowHistory.flowNodeIdCurrent = this.context._flow.flowNodeIdCurrent;\n      this.context._flowHistory.flowNodeNameCurrent = this.context._flow.flowNodeNameCurrent;\n      await this.modelFlowHistory.update(this.context._flowHistory);\n    }\n\n    async _clear(options) {\n      options = options || {};\n      const flowNodeHandleStatus = options.flowNodeHandleStatus || 1;\n      const flowNodeRemark = options.flowNodeRemark || null;\n      const timeDone = new Date();\n      // clear\n      await this._setCurrent(true);\n      // delete node\n      await this.modelFlowNode.delete({ id: this.contextNode._flowNodeId });\n      // set nodeHistoryStatus\n      this.contextNode._flowNodeHistory.flowNodeStatus = 1;\n      this.contextNode._flowNodeHistory.flowNodeHandleStatus = flowNodeHandleStatus;\n      this.contextNode._flowNodeHistory.flowNodeRemark = flowNodeRemark;\n      this.contextNode._flowNodeHistory.timeDone = timeDone;\n      await this.modelFlowNodeHistory.update(this.contextNode._flowNodeHistory);\n    }\n\n    async _clearRemains() {\n      // clear taskRemains\n      if (this.nodeBaseBean.clearRemains) {\n        await this.nodeBaseBean.clearRemains();\n      }\n      // delete node\n      await this.modelFlowNode.delete({ id: this.contextNode._flowNodeId });\n      // set nodeHistoryStatus\n      this.contextNode._flowNodeHistory.flowNodeStatus = 1;\n      await this.modelFlowNodeHistory.update(this.contextNode._flowNodeHistory);\n    }\n\n    getNodeDefOptions() {\n      return this.nodeBaseBean.getNodeDefOptions();\n    }\n\n    async enter() {\n      // current\n      await this._setCurrent();\n      // raise event: onNodeEnter\n      const res = await this.nodeBaseBean.onNodeEnter();\n      await this._saveVars();\n      if (!res) return false;\n      return await this.begin();\n    }\n\n    async begin() {\n      // raise event: onNodeBegin\n      const res = await this.nodeBaseBean.onNodeBegin();\n      await this._saveVars();\n      if (!res) return false;\n      return await this.doing();\n    }\n\n    async doing() {\n      // raise event: onNodeDoing\n      const res = await this.nodeBaseBean.onNodeDoing();\n      await this._saveVars();\n      if (!res) return false;\n      return await this.end();\n    }\n\n    async end() {\n      // raise event: onNodeEnd\n      const res = await this.nodeBaseBean.onNodeEnd();\n      await this._saveVars();\n      if (!res) return false;\n      return await this.leave();\n    }\n\n    async leave() {\n      // raise event: onNodeLeave\n      const res = await this.nodeBaseBean.onNodeLeave();\n      await this._saveVars();\n      // clear\n      await this._clear();\n      // res\n      if (!res) return false;\n      // next\n      return await this.flowInstance.nextEdges({ contextNode: this.contextNode });\n    }\n\n    get nodeBaseBean() {\n      if (!this._nodeBaseBean) {\n        this._nodeBaseBean = ctx.bean._newBean(this.nodeBase.beanFullName, {\n          flowInstance: this.flowInstance, nodeInstance: this,\n          context: this.context, contextNode: this.contextNode,\n        });\n      }\n      return this._nodeBaseBean;\n    }\n\n    get nodeBase() {\n      if (!this._nodeBase) {\n        this._nodeBase = ctx.bean.flowDef._getFlowNodeBase(this.contextNode._nodeDef.type);\n        if (!this._nodeBase) throw new Error(`flow node not found: ${this.contextNode._nodeDef.type}`);\n      }\n      return this._nodeBase;\n    }\n\n  }\n  return FlowNode;\n};\n","module.exports = ctx => {\n  class Procedure {\n\n    // mode: mine/others/flowing/history\n    selectFlows({ iid, userIdWho, where, orders, page, count, mode }) {\n      iid = parseInt(iid);\n      userIdWho = parseInt(userIdWho);\n\n      // mode\n      if (mode === 'mine') {\n        return this._selectFlows_Mine({ iid, userIdWho, where, orders, page, count });\n      } else if (mode === 'others' || mode === 'flowing') {\n        return this._selectFlows_Others({ iid, userIdWho, where, orders, page, count, mode });\n      }\n      return this._selectFlows_History({ iid, userIdWho, where, orders, page, count });\n    }\n\n    _selectFlows_Mine({ iid, userIdWho, where, orders, page, count }) {\n      // -- tables\n      // -- a: aFlow\n      // -- c: aUser\n\n      // for safe\n      where = where ? ctx.model._where(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      // vars\n      let _userWhere;\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // user\n      if (userIdWho !== 0) {\n        _userWhere = ` and a.flowUserId=${userIdWho}`;\n      } else {\n        _userWhere = '';\n      }\n\n      // fields\n      let _selectFields;\n      if (count) {\n        _selectFields = 'count(*) as _count';\n      } else {\n        _selectFields = `a.id,a.id as flowId,a.createdAt,a.updatedAt,a.deleted,a.iid,a.flowName,a.flowStatus,a.flowAtomId,a.flowNodeIdCurrent,a.flowNodeNameCurrent,a.flowUserId,\n            c.userName,c.avatar\n          `;\n      }\n\n      // sql\n      const _sql =\n        `select ${_selectFields} from aFlow a\n            left join aUser c on a.flowUserId=c.id\n\n          ${_where}\n           (\n             a.deleted=0 and a.iid=${iid}\n             ${_userWhere}\n           )\n\n          ${count ? '' : _orders}\n          ${count ? '' : _limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n\n    _selectFlows_Others({ iid, userIdWho, where, orders, page, count, mode }) {\n      // -- tables\n      // -- a: aFlow\n      // -- c: aUser\n      // -- d: aFlowTaskHistory\n\n      // for safe\n      where = where ? ctx.model._where(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      // vars\n      let _userWhere;\n      let _modeWhere;\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // user\n      if (userIdWho !== 0) {\n        _userWhere = ` and exists(select d.id from aFlowTaskHistory d where d.deleted=0 and d.flowId=a.id and d.userIdAssignee=${userIdWho})`;\n      } else {\n        _userWhere = '';\n      }\n\n      // mode\n      if (mode === 'others') {\n        _modeWhere = ` and a.flowUserId<>${userIdWho}`;\n      } else {\n        _modeWhere = '';\n      }\n\n      // fields\n      let _selectFields;\n      if (count) {\n        _selectFields = 'count(*) as _count';\n      } else {\n        _selectFields = `a.id,a.id as flowId,a.createdAt,a.updatedAt,a.deleted,a.iid,a.flowName,a.flowStatus,a.flowAtomId,a.flowNodeIdCurrent,a.flowNodeNameCurrent,a.flowUserId,\n            c.userName,c.avatar\n          `;\n      }\n\n      // sql\n      const _sql =\n        `select ${_selectFields} from aFlow a\n            left join aUser c on a.flowUserId=c.id\n\n          ${_where}\n           (\n             a.deleted=0 and a.iid=${iid}\n             ${_userWhere}\n             ${_modeWhere}\n           )\n\n          ${count ? '' : _orders}\n          ${count ? '' : _limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n\n    _selectFlows_History({ iid, userIdWho, where, orders, page, count }) {\n      // -- tables\n      // -- a: aFlowHistory\n      // -- c: aUser\n      // -- d: aFlowTaskHistory\n\n      // for safe\n      where = where ? ctx.model._where(where) : null;\n      orders = orders ? ctx.model._orders(orders) : null;\n      const limit = page ? ctx.model._limit(page.size, page.index) : null;\n\n      // vars\n      let _userWhere;\n\n      //\n      const _where = where ? `${where} AND` : ' WHERE';\n      const _orders = orders || '';\n      const _limit = limit || '';\n\n      // user\n      if (userIdWho !== 0) {\n        _userWhere = ` and exists(select d.id from aFlowTaskHistory d where d.deleted=0 and d.flowId=a.flowId and d.userIdAssignee=${userIdWho})`;\n      } else {\n        _userWhere = '';\n      }\n\n      // fields\n      let _selectFields;\n      if (count) {\n        _selectFields = 'count(*) as _count';\n      } else {\n        _selectFields = `a.id,a.flowId,a.createdAt,a.updatedAt,a.deleted,a.iid,a.flowName,a.flowStatus,a.flowAtomId,a.flowNodeIdCurrent,a.flowNodeNameCurrent,a.flowUserId,a.timeEnd,a.flowHandleStatus,a.flowRemark,\n            c.userName,c.avatar\n          `;\n      }\n\n      // sql\n      const _sql =\n        `select ${_selectFields} from aFlowHistory a\n            left join aUser c on a.flowUserId=c.id\n\n          ${_where}\n           (\n             a.deleted=0 and a.iid=${iid}\n             ${_userWhere}\n           )\n\n          ${count ? '' : _orders}\n          ${count ? '' : _limit}\n        `;\n\n      // ok\n      return _sql;\n    }\n\n  }\n\n  return Procedure;\n\n};\n","module.exports = app => {\n  class Queue extends app.meta.BeanBase {\n\n    async execute(context) {\n      const { flowDefId } = context.data;\n      await this.ctx.bean.flowDef._deployQueue({ flowDefId });\n    }\n\n  }\n\n  return Queue;\n};\n","module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Stats {\n\n    async execute(context) {\n      const { user } = context;\n      const modelFlow = ctx.model.module(moduleInfo).flow;\n      const count = await modelFlow.count({\n        flowUserId: user.id,\n      });\n      return count;\n    }\n\n  }\n\n  return Stats;\n};\n","module.exports = app => {\n  class Version extends app.meta.BeanBase {\n\n    async update(options) {\n      if (options.version === 1) {\n        let sql;\n\n        // create table: aFlowDef\n        sql = `\n          CREATE TABLE aFlowDef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            description varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aFlowDefContent\n        sql = `\n          CREATE TABLE aFlowDefContent (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            content JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aFlowDefViewFull\n        sql = `\n          CREATE VIEW aFlowDefViewFull as\n            select a.*,b.content from aFlowDef a\n              left join aFlowDefContent b on a.id=b.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aFlow\n        //  flowStatus: 1/end\n        sql = `\n          CREATE TABLE aFlow (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            flowDefId int(11) DEFAULT '0',\n            flowDefKey varchar(255) DEFAULT NULL,\n            flowDefRevision int(11) DEFAULT '0',\n            flowName varchar(255) DEFAULT NULL,\n            flowStatus int(11) DEFAULT '0',\n            flowAtomId int(11) DEFAULT '0',\n            flowVars JSON DEFAULT NULL,\n            flowNodeIdCurrent int(11) DEFAULT '0',\n            flowNodeNameCurrent varchar(255) DEFAULT NULL,\n            flowUserId int(11) DEFAULT '0',\n            timeEnd timestamp DEFAULT NULL,\n            flowRemark varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aFlowNode\n        sql = `\n          CREATE TABLE aFlowNode (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            flowId int(11) DEFAULT '0',\n            flowNodeDefId varchar(255) DEFAULT NULL,\n            flowNodeName varchar(255) DEFAULT NULL,\n            flowNodeType varchar(50) DEFAULT NULL,\n            flowNodeIdPrev int(11) DEFAULT '0',\n            nodeVars JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aFlowHistory\n        //  flowStatus: 1/end\n        sql = `\n          CREATE TABLE aFlowHistory (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            flowId int(11) DEFAULT '0',\n            flowDefId int(11) DEFAULT '0',\n            flowDefKey varchar(255) DEFAULT NULL,\n            flowDefRevision int(11) DEFAULT '0',\n            flowName varchar(255) DEFAULT NULL,\n            flowStatus int(11) DEFAULT '0',\n            flowAtomId int(11) DEFAULT '0',\n            flowVars JSON DEFAULT NULL,\n            flowNodeIdCurrent int(11) DEFAULT '0',\n            flowNodeNameCurrent varchar(255) DEFAULT NULL,\n            flowUserId int(11) DEFAULT '0',\n            timeEnd timestamp DEFAULT NULL,\n            flowRemark varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aFlowNodeHistory\n        sql = `\n          CREATE TABLE aFlowNodeHistory (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            flowId int(11) DEFAULT '0',\n            flowNodeId int(11) DEFAULT '0',\n            flowNodeDefId varchar(255) DEFAULT NULL,\n            flowNodeName varchar(255) DEFAULT NULL,\n            flowNodeType varchar(50) DEFAULT NULL,\n            flowNodeIdPrev int(11) DEFAULT '0',\n            flowNodeStatus int(11) DEFAULT '0',\n            flowNodeRemark TEXT DEFAULT NULL,\n            timeDone timestamp DEFAULT NULL,\n            nodeVars JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n\n      if (options.version === 2) {\n        let sql;\n\n        // alter table: aFlow\n        sql = `\n        ALTER TABLE aFlow\n          ADD COLUMN flowHandleStatus int(11) DEFAULT '0'\n                  `;\n        await this.ctx.model.query(sql);\n\n        // alter table: aFlowHistory\n        sql = `\n        ALTER TABLE aFlowHistory\n          ADD COLUMN flowHandleStatus int(11) DEFAULT '0'\n                  `;\n        await this.ctx.model.query(sql);\n\n        // alter table: aFlowNode\n        sql = `\n        ALTER TABLE aFlowNode\n          ADD COLUMN flowNodeHandleStatus int(11) DEFAULT '0'\n                  `;\n        await this.ctx.model.query(sql);\n\n        // alter table: aFlowNodeHistory\n        sql = `\n        ALTER TABLE aFlowNodeHistory\n          ADD COLUMN flowNodeHandleStatus int(11) DEFAULT '0'\n                  `;\n        await this.ctx.model.query(sql);\n\n      }\n\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // add role rights\n        const roleRights = [\n          { roleName: 'system', action: 'create' },\n          { roleName: 'system', action: 'read', scopeNames: 0 },\n          { roleName: 'system', action: 'read', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'write', scopeNames: 0 },\n          { roleName: 'system', action: 'write', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'delete', scopeNames: 0 },\n          { roleName: 'system', action: 'delete', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'clone', scopeNames: 0 },\n          { roleName: 'system', action: 'clone', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'enable', scopeNames: 0 },\n          { roleName: 'system', action: 'enable', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'disable', scopeNames: 0 },\n          { roleName: 'system', action: 'disable', scopeNames: 'superuser' },\n          { roleName: 'system', action: 'deleteBulk' },\n          { roleName: 'system', action: 'exportBulk' },\n        ];\n        await this.ctx.bean.role.addRoleRightBatch({ atomClassName: 'flowDef', roleRights });\n      }\n    }\n\n    async test() { }\n\n  }\n\n  return Version;\n};\n","const versionManager = require('./bean/version.manager.js');\nconst atomFlowDef = require('./bean/atom.flowDef.js');\nconst queueDeploy = require('./bean/queue.deploy.js');\nconst localContextFlow = require('./bean/local.context.flow.js');\nconst localContextNode = require('./bean/local.context.node.js');\nconst localContextEdge = require('./bean/local.context.edge.js');\nconst localFlowFlow = require('./bean/local.flow.flow.js');\nconst localFlowNode = require('./bean/local.flow.node.js');\nconst localFlowEdge = require('./bean/local.flow.edge.js');\nconst localFlowListener = require('./bean/local.flow.listener.js');\nconst localProcedure = require('./bean/local.procedure.js');\nconst beanFlow = require('./bean/bean.flow.js');\nconst beanFlowDef = require('./bean/bean.flowDef.js');\nconst statsFlowInitiateds = require('./bean/stats.flowInitiateds.js');\n\nmodule.exports = app => {\n  const beans = {\n    // version\n    'version.manager': {\n      mode: 'app',\n      bean: versionManager,\n    },\n    // atom\n    'atom.flowDef': {\n      mode: 'app',\n      bean: atomFlowDef,\n    },\n    // queue\n    'queue.deploy': {\n      mode: 'app',\n      bean: queueDeploy,\n    },\n    // local\n    'local.context.flow': {\n      mode: 'ctx',\n      bean: localContextFlow,\n    },\n    'local.context.node': {\n      mode: 'ctx',\n      bean: localContextNode,\n    },\n    'local.context.edge': {\n      mode: 'ctx',\n      bean: localContextEdge,\n    },\n    'local.flow.flow': {\n      mode: 'ctx',\n      bean: localFlowFlow,\n    },\n    'local.flow.node': {\n      mode: 'ctx',\n      bean: localFlowNode,\n    },\n    'local.flow.edge': {\n      mode: 'ctx',\n      bean: localFlowEdge,\n    },\n    'local.flow.listener': {\n      mode: 'ctx',\n      bean: localFlowListener,\n    },\n    'local.procedure': {\n      mode: 'ctx',\n      bean: localProcedure,\n    },\n    // global\n    flow: {\n      mode: 'ctx',\n      bean: beanFlow,\n      global: true,\n    },\n    flowDef: {\n      mode: 'ctx',\n      bean: beanFlowDef,\n      global: true,\n    },\n    // stats\n    'stats.flowInitiateds': {\n      mode: 'ctx',\n      bean: statsFlowInitiateds,\n    },\n  };\n  return beans;\n};\n","module.exports = class FlowEdgeBase {\n  constructor(ctx, options) {\n    this.ctx = ctx;\n    if (options) {\n      this.flowInstance = options.flowInstance;\n      this.edgeInstance = options.edgeInstance;\n      this.context = options.context;\n      this.contextNode = options.contextNode;\n      this.contextEdge = options.contextEdge;\n    }\n  }\n\n  async onEdgeEnter() {\n    await this.flowInstance._flowListener.onEdgeEnter(this.contextEdge, this.contextNode);\n    return true;\n  }\n\n  async onEdgeTake() {\n    await this.flowInstance._flowListener.onEdgeTake(this.contextEdge, this.contextNode);\n    return true;\n  }\n\n  async onEdgeLeave() {\n    await this.flowInstance._flowListener.onEdgeLeave(this.contextEdge, this.contextNode);\n    return true;\n  }\n\n};\n\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = class FlowNodeBase {\n  constructor(ctx, options) {\n    this.ctx = ctx;\n    if (options) {\n      this.flowInstance = options.flowInstance;\n      this.nodeInstance = options.nodeInstance;\n      this.context = options.context;\n      this.contextNode = options.contextNode;\n    }\n  }\n\n  getNodeDefOptions() {\n    // nodeDef\n    const nodeDef = this.contextNode._nodeDef;\n    // options\n    let options = nodeDef.options || {};\n    // default\n    const optionsDefault = this.nodeInstance.nodeBase.options.default;\n    if (optionsDefault) {\n      options = extend(true, {}, optionsDefault, options);\n    }\n    // listener\n    const res = this.flowInstance._flowListener.getNodeDefOptions(this.contextNode, { options });\n    if (res) {\n      options = res;\n    }\n    return options;\n  }\n\n  async onNodeEnter() {\n    await this.flowInstance._flowListener.onNodeEnter(this.contextNode);\n    return true;\n  }\n\n  async onNodeBegin() {\n    await this.flowInstance._flowListener.onNodeBegin(this.contextNode);\n    return true;\n  }\n\n  async onNodeDoing() {\n    await this.flowInstance._flowListener.onNodeDoing(this.contextNode);\n    return true;\n  }\n\n  async onNodeEnd() {\n    await this.flowInstance._flowListener.onNodeEnd(this.contextNode);\n    return true;\n  }\n\n  async onNodeLeave() {\n    await this.flowInstance._flowListener.onNodeLeave(this.contextNode);\n    return true;\n  }\n\n};\n\n","module.exports = ({ ctx /* flowInstance*/ }) => {\n  class Utils {\n\n    constructor({ context, contextNode, contextEdge }) {\n      this.context = context;\n      this.contextNode = contextNode;\n      this.contextEdge = contextEdge;\n    }\n\n    async executeService({ bean, parameter }) {\n      const globals = {};\n      if (this.context) globals.context = this.context;\n      if (this.contextNode) globals.contextNode = this.contextNode;\n      if (this.contextEdge) globals.contextEdge = this.contextEdge;\n      return await ctx.bean.flow.executeService({\n        bean, parameter, globals,\n      });\n    }\n\n  }\n  return Utils;\n};\n","module.exports = () => {\n  class FlowVars {\n\n    constructor() {\n      this._vars = null;\n      this._dirty = false;\n    }\n\n    get(names) {\n      names = names.split('.');\n      let value = this._vars;\n      for (const name of names) {\n        value = value[name];\n        if (value === undefined) break;\n      }\n      return value;\n    }\n\n    set(names, value) {\n      names = names.split('.');\n      let obj = this._vars;\n      for (let i = 0; i < names.length - 1; i++) {\n        const name = names[i];\n        if (obj[name] === undefined) {\n          obj[name] = {};\n        }\n        obj = obj[name];\n      }\n      const name = names[names.length - 1];\n      obj[name] = value;\n      // dirty\n      this._dirty = true;\n    }\n\n  }\n  return FlowVars;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // queues\n  config.queues = {\n    deploy: {\n      bean: 'deploy',\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  flow: {\n    status: {\n      flowing: 0,\n      end: 1,\n    },\n  },\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Flow definition not Found: %s',\n  1002: 'Flow definition disabled: %s',\n  1003: 'Flow not Found: %s',\n  1004: 'Flow Node not Found: %s',\n  1005: 'Flow Node definition not Found: %s',\n  1006: 'Previous Flow Node not Found: %s',\n  1007: 'Role not Found: %s',\n  1008: 'Flow Completed: %s',\n  1009: 'Flow Outdated: %s',\n};\n","module.exports = {\n  FlowTitle: 'Flow',\n  WorkFlow: 'Work Flow',\n  WorkFlows: 'Work Flows',\n  FlowInitiator: 'Flow Initiator',\n};\n","module.exports = {\n  FlowTitle: '流程',\n  FlowDefinition: '流程定义',\n  WorkFlow: '工作流',\n  WorkFlows: '工作流',\n  End: '结束',\n  Current: '当前',\n  Drafting: '起草',\n  Review: '评审',\n  Pass: '通过',\n  Reject: '驳回',\n  Passed: '已通过',\n  Rejected: '已驳回',\n  Cancelled: '已取消',\n  FlowInitiator: '流程发起人',\n  'Create FlowDefinition': '新建流程定义',\n  'FlowDefinition List': '流程定义列表',\n  'Flow definition not Found: %s': '流程定义未发现: %s',\n  'Flow definition disabled: %s': '流程定义已禁用: %s',\n  'Flow not Found: %s': '流程未发现: %s',\n  'Flow Node not Found: %s': '流程节点未发现: %s',\n  'Flow Node definition not Found: %s': '流程节点定义未发现: %s',\n  'Previous Flow Node not Found: %s': '前置流程节点未发现: %s',\n  'Role not Found: %s': '角色未发现: %s',\n  'Flow Completed: %s': '流程已结束: %s',\n  'Flow Outdated: %s': '流程已过期: %s',\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const workflow = {\n    info: {\n      title: 'WorkFlows',\n      persistence: true,\n      uniform: {\n        stats: {\n          params: {\n            module: 'a-message',\n            name: 'message',\n            nameSub: `${moduleInfo.relativeName}_workflow`,\n          },\n          color: 'red',\n        },\n      },\n    },\n  };\n  return workflow;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const resources = [\n    // menu\n    {\n      atomName: 'Create FlowDefinition',\n      atomStaticKey: 'createFlowDef',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.Create',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'flowDef',\n        atomAction: 'create',\n      }),\n      resourceRoles: 'template.system',\n    },\n    {\n      atomName: 'FlowDefinition List',\n      atomStaticKey: 'listFlowDef',\n      atomRevision: 0,\n      atomCategoryId: 'a-base:menu.List',\n      resourceType: 'a-base:menu',\n      resourceConfig: JSON.stringify({\n        module: moduleInfo.relativeName,\n        atomClassName: 'flowDef',\n        atomAction: 'read',\n      }),\n      resourceRoles: 'template.system',\n    },\n  ];\n  return resources;\n};\n","module.exports = app => {\n  const schemas = {};\n  // flowDef\n  schemas.flowDef = {\n    type: 'object',\n    properties: {\n      // title\n      __groupTitle: {\n        ebType: 'group-flatten',\n        ebTitle: 'Title',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Name',\n        notEmpty: true,\n      },\n      // content\n      __groupContent: {\n        ebType: 'group-flatten',\n        ebTitle: 'Content',\n      },\n      content: {\n        type: 'string',\n        ebType: 'component',\n        ebTitle: 'Content',\n        ebRender: {\n          module: 'a-flowchart',\n          name: 'renderFlowDefContent',\n        },\n      },\n      // Basic Info\n      __groupBasicInfo: {\n        ebType: 'group-flatten',\n        ebTitle: 'Basic Info',\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n      atomCategoryId: {\n        type: 'number',\n        ebType: 'category',\n        ebTitle: 'Category',\n      },\n      atomTags: {\n        type: [ 'string', 'null' ],\n        ebType: 'tags',\n        ebTitle: 'Tags',\n      },\n      // Extra\n      __groupExtra: {\n        ebType: 'group-flatten',\n        ebTitle: 'Extra',\n      },\n      atomStaticKey: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'KeyForAtom',\n        ebReadOnly: true,\n        notEmpty: true,\n      },\n      atomRevision: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Revision',\n        ebReadOnly: true,\n      },\n    },\n  };\n  // flowDef search\n  schemas.flowDefSearch = {\n    type: 'object',\n    properties: {\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Description',\n      },\n    },\n  };\n  return schemas;\n};\n","module.exports = app => {\n\n  class FlowController extends app.Controller {\n\n    // options\n    //   where, orders, page, mode: mine/others/flowing/history\n    async select() {\n      const options = this.ctx.request.body.options;\n      options.page = this.ctx.bean.util.page(options.page);\n      const items = await this.ctx.service.flow.select({\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    async count() {\n      const options = this.ctx.request.body.options;\n      const count = await this.ctx.service.flow.count({\n        options,\n        user: this.ctx.state.user.op,\n      });\n      this.ctx.success(count);\n    }\n\n  }\n  return FlowController;\n};\n","module.exports = app => {\n\n  class FlowDefController extends app.Controller {\n\n    nodeBases() {\n      const res = this.ctx.service.flowDef.nodeBases();\n      this.ctx.success(res);\n    }\n\n    edgeBases() {\n      const res = this.ctx.service.flowDef.edgeBases();\n      this.ctx.success(res);\n    }\n\n    flowServiceBases() {\n      const res = this.ctx.service.flowDef.flowServiceBases();\n      this.ctx.success(res);\n    }\n\n  }\n  return FlowDefController;\n};\n","const flow = require('./controller/flow.js');\nconst flowDef = require('./controller/flowDef.js');\n\nmodule.exports = app => {\n  const controllers = {\n    flow,\n    flowDef,\n  };\n  return controllers;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst constants = require('./config/constants.js');\nconst FlowNodeBase = require('./common/flowNodeBase.js');\nconst FlowEdgeBase = require('./common/flowEdgeBase.js');\n\nmodule.exports = app => {\n\n  // FlowNodeBase/FlowEdgeBase\n  app.meta.FlowNodeBase = FlowNodeBase;\n  app.meta.FlowEdgeBase = FlowEdgeBase;\n\n  // aops\n  const aops = require('./aops.js')(app);\n  // beans\n  const beans = require('./beans.js')(app);\n  // routes\n  const routes = require('./routes.js')(app);\n  // controllers\n  const controllers = require('./controllers.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    aops,\n    beans,\n    routes,\n    controllers,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    constants,\n    meta,\n  };\n\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const staticResources = require('./config/static/resources.js')(app);\n  const socketioWorkflow = require('./config/socketio/workflow.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n        flowDef: {\n          info: {\n            bean: 'flowDef',\n            title: 'FlowDefinition',\n            tableName: 'aFlowDef',\n            tableNameModes: {\n              full: 'aFlowDefViewFull',\n            },\n            category: true,\n            tag: true,\n          },\n          actions: {\n            write: {\n              enableOnStatic: true,\n            },\n          },\n          validator: 'flowDef',\n          search: {\n            validator: 'flowDefSearch',\n          },\n        },\n      },\n      statics: {\n        'a-base.resource': {\n          items: staticResources,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        flowDef: {\n          schemas: 'flowDef',\n        },\n        flowDefSearch: {\n          schemas: 'flowDefSearch',\n        },\n      },\n      keywords: {},\n      schemas: {\n        flowDef: schemas.flowDef,\n        flowDefSearch: schemas.flowDefSearch,\n      },\n    },\n    stats: {\n      providers: {\n        flowInitiateds: {\n          user: true,\n          bean: 'flowInitiateds',\n        },\n      },\n    },\n    socketio: {\n      messages: {\n        workflow: socketioWorkflow,\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  class Flow extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aFlow', options: { disableDeleted: true } });\n    }\n  }\n  return Flow;\n};\n","module.exports = app => {\n  class FlowDef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aFlowDef', options: { disableDeleted: false } });\n    }\n  }\n  return FlowDef;\n};\n","module.exports = app => {\n  class FlowDefContent extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aFlowDefContent', options: { disableDeleted: false } });\n    }\n  }\n  return FlowDefContent;\n};\n","module.exports = app => {\n  class FlowDefFull extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aFlowDefViewFull', options: { disableDeleted: false } });\n    }\n  }\n  return FlowDefFull;\n};\n","module.exports = app => {\n  class FlowHistory extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aFlowHistory', options: { disableDeleted: false } });\n    }\n  }\n  return FlowHistory;\n};\n","module.exports = app => {\n  class FlowNode extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aFlowNode', options: { disableDeleted: true } });\n    }\n  }\n  return FlowNode;\n};\n","module.exports = app => {\n  class FlowNodeHistory extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aFlowNodeHistory', options: { disableDeleted: false } });\n    }\n  }\n  return FlowNodeHistory;\n};\n","const flowDef = require('./model/flowDef.js');\nconst flowDefContent = require('./model/flowDefContent.js');\nconst flowDefFull = require('./model/flowDefFull.js');\nconst flow = require('./model/flow.js');\nconst flowHistory = require('./model/flowHistory.js');\nconst flowNode = require('./model/flowNode.js');\nconst flowNodeHistory = require('./model/flowNodeHistory.js');\n\nmodule.exports = app => {\n  const models = {\n    flowDef,\n    flowDefContent,\n    flowDefFull,\n    flow,\n    flowHistory,\n    flowNode,\n    flowNodeHistory,\n  };\n  return models;\n};\n","module.exports = app => {\n  const routes = [\n    // flow\n    { method: 'post', path: 'flow/select', controller: 'flow' },\n    { method: 'post', path: 'flow/count', controller: 'flow' },\n    // flowDef\n    { method: 'post', path: 'flowDef/nodeBases', controller: 'flowDef' },\n    { method: 'post', path: 'flowDef/edgeBases', controller: 'flowDef' },\n    { method: 'post', path: 'flowDef/flowServiceBases', controller: 'flowDef' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n\n  class Flow extends app.Service {\n\n    async select({ options, user }) {\n      return await this.ctx.bean.flow.select({ options, user });\n    }\n\n    async count({ options, user }) {\n      return await this.ctx.bean.flow.count({ options, user });\n    }\n\n  }\n  return Flow;\n};\n\n","module.exports = app => {\n\n  class FlowDef extends app.Service {\n\n    nodeBases() {\n      return this.ctx.bean.flowDef.nodeBases();\n    }\n\n    edgeBases() {\n      return this.ctx.bean.flowDef.edgeBases();\n    }\n\n    flowServiceBases() {\n      return this.ctx.bean.flowDef.flowServiceBases();\n    }\n\n  }\n  return FlowDef;\n};\n\n","const flow = require('./service/flow.js');\nconst flowDef = require('./service/flowDef.js');\n\nmodule.exports = app => {\n  const services = {\n    flow,\n    flowDef,\n  };\n  return services;\n};\n","module.exports = require(\"require3\");;","module.exports = require(\"vm\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(421);\n"],"sourceRoot":""}